!function(e){function a(t){if(n[t])return n[t].exports;var r=n[t]={exports:{},id:t,loaded:!1};return e[t].call(r.exports,r,r.exports,a),r.loaded=!0,r.exports}var n={};return a.m=e,a.c=n,a.p="",a(0)}([function(e,n,t){function r(e,a,n){const t=n.createShader(a);if(n.shaderSource(t,e),n.compileShader(t),!n.getShaderParameter(t,n.COMPILE_STATUS))throw"Shader compile failed with: "+n.getShaderInfoLog(t);return t}function o(e,a,n){const t=n.getUniformLocation(e,a);if(t===-1)throw"Can not find uniform "+a+".";return t}function i(e,a,n){const t=n.getAttribLocation(e,a);if(t===-1)throw"Can not find attribute "+a+".";return t}function c(e,a,n){var t=e.createProgram();e.attachShader(t,a),e.attachShader(t,n),e.linkProgram(t),e.useProgram(t);var r=new Float32Array([-1,1,-1,-1,1,1,1,-1]),o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,r,e.STATIC_DRAW);var c=i(t,"position",e);return e.enableVertexAttribArray(c),e.vertexAttribPointer(c,2,e.FLOAT,e.FALSE,8,0),t}function l(e,a){var n=r(f.replace("__NUMBER_OF_ITERATIONS",e).replace("__FRACTAL_FUNC",a),_.FRAGMENT_SHADER,_);program=c(_,s,n)}function u(){_.viewport(0,0,d.width,d.height);var e=Date.now(),a=new Float32Array(9);a[0]=R.width,a[1]=R.height,I.checked?(a[2]=-.795+Math.sin(e/2e3)/40,a[3]=.2321+Math.cos(e/1330)/40):(a[2]=Number(R.c_real),a[3]=Number(R.c_imag)),a[4]=8,a[5]=R.center_real-R.frame_radius,a[6]=R.center_real+R.frame_radius,a[7]=R.center_imag-R.frame_radius,a[8]=R.center_imag+R.frame_radius;var n=o(program,"data",_);_.uniform1fv(n,a),_.drawArrays(_.TRIANGLE_STRIP,0,4),requestAnimationFrame(u)}var f=t(1),m="attribute vec2 position;\nvoid main() { gl_Position = vec4(position, 0.0, 1.0); }",d=document.getElementById("main_canvas"),_=d.getContext("webgl"),s=r(m,_.VERTEX_SHADER,_);l(1024,"julia");var g=document.getElementById("res_x"),v=document.getElementById("res_y"),p=document.getElementById("iterations"),A=document.getElementById("fractal_mandelbrot"),y=document.getElementById("fractal_julia"),I=document.getElementById("fractal_julia_animated"),h=document.getElementById("c_real"),E=document.getElementById("c_imag"),R={width:g.value,height:v.value,iterations:p.value,c_real:h.value,c_imag:E.value,center_real:0,center_imag:0,frame_radius:2,fractal_type:"julia"};g.onkeyup=function(){d.width=Number(g.value),R.width=Number(g.value)},v.onkeyup=function(){d.height=Number(v.value),R.height=Number(v.value)},p.onkeyup=function(){R.iterations=Number(p.value),l(R.iterations,R.fractal_type)},y.onclick=function(){R.fractal_type="julia",l(R.iterations,R.fractal_type)},A.onclick=function(){R.fractal_type="mandelbrot",l(R.iterations,R.fractal_type)},h.onkeyup=function(){R.c_real=Number(h.value)},E.onkeyup=function(){R.c_imag=Number(E.value)},function(){var e=!1;window.onmousemove=function(n){if(a=n,e){n.preventDefault();var t=2*-(n.movementX/d.width)*R.frame_radius,r=2*-(n.movementY/d.height)*R.frame_radius;R.center_real+=t,R.center_imag+=r}},d.onmousedown=function(){e=!0},window.onmouseup=function(){e=!1}}(),d.onwheel=function(e){e.preventDefault(),e.deltaY>0?R.frame_radius*=1.1:R.frame_radius/=1.1},requestAnimationFrame(u)},function(e,a){e.exports="precision highp float;\n\n// WIDTH, HEIGHT, C_REAL, C_IMAGINARY, X_MIN, X_MAX, Y_MIN, Y_MAX\nuniform float data[9];\n\nfloat WIDTH      = data[0];\nfloat HEIGHT     = data[1];\n\nfloat C_REAL     = data[2];\nfloat C_IMAG     = data[3];\n\nfloat BRIGHTNESS = data[4];\n\nfloat X_MIN      = data[5];\nfloat X_MAX      = data[6];\nfloat Y_MIN      = data[7];\nfloat Y_MAX      = data[8];\n\nconst int MAX_ITERATIONS = __NUMBER_OF_ITERATIONS;\n\nvec2 iResolution = vec2(WIDTH, HEIGHT);\n\nstruct complex {\n  float real;\n  float imaginary;\n};\n\nfloat fractal(complex c, complex z) {\n  for (int iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n\n    // z <- z^2 + c\n    float real = z.real * z.real - z.imaginary * z.imaginary + c.real;\n    float imaginary = 2.0 * z.real * z.imaginary + c.imaginary;\n\n    z.real = real;\n    z.imaginary = imaginary;\n\n    if (z.real * z.real + z.imaginary * z.imaginary > 4.0) {\n      float sl = float(iteration) - log2(log2(z.real * z.real + z.imaginary * z.imaginary)) + 4.0;\n      return sl;\n    }\n  }\n\n  return 0.0;\n}\n\nfloat mandelbrot(vec2 coordinate, vec2 offset) {\n  complex c = complex(coordinate.x, coordinate.y);\n  complex z = complex(0.0, 0.0);\n\n  return fractal(c, z);\n}\n\nfloat julia(vec2 coordinate, vec2 offset) {\n  complex c = complex(offset.x, offset.y);\n  complex z = complex(coordinate.x, coordinate.y);\n\n  return fractal(c, z);\n}\n\nvec2 fragCoordToXY(vec4 fragCoord) {\n  vec2 relativePosition = fragCoord.xy / iResolution.xy;\n  float aspectRatio = iResolution.x / HEIGHT;\n\n  vec2 center = vec2((X_MAX + X_MIN) / 2.0, (Y_MAX + Y_MIN) / 2.0);\n\n  vec2 cartesianPosition = (relativePosition - 0.5) * (X_MAX - X_MIN);\n  cartesianPosition.x += center.x;\n  cartesianPosition.y -= center.y;\n  cartesianPosition.x *= aspectRatio;\n\n  return cartesianPosition;\n}\n\nvoid main() {\n  vec2 coordinate = fragCoordToXY(gl_FragCoord);\n\n  float fractalValue = __FRACTAL_FUNC(coordinate, vec2(C_REAL, C_IMAG));\n\n  vec3 color = 0.5 + 0.5*cos( 3.0 + fractalValue*0.15 + vec3(0.0,0.6,1.0));\n\n  gl_FragColor = vec4(color, 1.0);\n}\n"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVpbGQvYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCAzNWFhYzg5YjQ3ZjQxYTMyMGQ1MCIsIndlYnBhY2s6Ly8vLi9qcy9tYW5kZWxicm90LmpzIiwid2VicGFjazovLy8uL3NoYWRlcnMvZnJhY3RhbC5nbHNsIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsImNvbXBpbGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJzaGFkZXJUeXBlIiwiY29udGV4dCIsInNoYWRlciIsImNyZWF0ZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0U2hhZGVySW5mb0xvZyIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInByb2dyYW0iLCJuYW1lIiwidW5pZm9ybUxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJhdHRyaWJ1dGVMb2NhdGlvbiIsInNldHVwV2ViZ2xQcm9ncmFtIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJ1c2VQcm9ncmFtIiwidmVydGV4RGF0YSIsIkZsb2F0MzJBcnJheSIsInZlcnRleERhdGFCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwicG9zaXRpb25IYW5kbGUiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsIkZBTFNFIiwicmVDb21waWxlU2hhZGVyIiwiaXRlcmF0aW9ucyIsImZyYWN0YWxfdHlwZSIsIm5ld0ZyYWdtZW50U2hhZGVyIiwiZnJhY3RhbFNoYWRlciIsInJlcGxhY2UiLCJGUkFHTUVOVF9TSEFERVIiLCJkcmF3RnJhbWUiLCJ2aWV3cG9ydCIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwidGltZSIsIkRhdGUiLCJub3ciLCJkYXRhVG9TZW5kVG9HUFUiLCJjb25maWciLCJuX2NoZWNrX2p1bGlhX2FuaW1hdGVkIiwiY2hlY2tlZCIsIk1hdGgiLCJzaW4iLCJjb3MiLCJOdW1iZXIiLCJjX3JlYWwiLCJjX2ltYWciLCJjZW50ZXJfcmVhbCIsImZyYW1lX3JhZGl1cyIsImNlbnRlcl9pbWFnIiwiZGF0YVBvaW50ZXJGbG9hdEFycmF5IiwidW5pZm9ybTFmdiIsImRyYXdBcnJheXMiLCJUUklBTkdMRV9TVFJJUCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZlcnRleFNoYWRlclN0cmluZyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0IiwiVkVSVEVYX1NIQURFUiIsIm5fcmVzX3giLCJuX3Jlc195Iiwibl9pdGVyYXRpb25zIiwibl9jaGVja19tYW5kZWxicm90Iiwibl9jaGVja19qdWxpYSIsIm5fY19yZWFsIiwibl9jX2ltYWciLCJ2YWx1ZSIsIm9ua2V5dXAiLCJvbmNsaWNrIiwiY2FudmFzX2lzX2NsaWNrZWQiLCJ3aW5kb3ciLCJvbm1vdXNlbW92ZSIsImUiLCJhIiwicHJldmVudERlZmF1bHQiLCJjZW50ZXJfcmVhbF9vZmZzZXQiLCJtb3ZlbWVudFgiLCJjZW50ZXJfaW1hZ19vZmZzZXQiLCJtb3ZlbWVudFkiLCJvbm1vdXNlZG93biIsIm9ubW91c2V1cCIsIm9ud2hlZWwiLCJkZWx0YVkiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDSW5CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FFLFdBQ0FFLEdBQUFKLEVBQ0FLLFFBQUEsRUFVQSxPQU5BUCxHQUFBRSxHQUFBTSxLQUFBSCxF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LFFBQVUsV0FBYzlCLEVBQU9PLE9BQVNELE9BQU9xQixFQUFTRSxRQUNqRUQsRUFBU0UsUUFBVSxXQUFjOUIsRUFBT1EsT0FBU0YsT0FBT3NCLEVBQVNDLFFBR2pFLFdBQ0ksR0FBSUcsSUFBb0IsQ0FDeEJDLFFBQU9DLFlBQWMsU0FBVUMsR0FFM0IsR0FEQUMsRUFBSUQsRUFDQUgsRUFBbUIsQ0FFbkJHLEVBQUVFLGdCQUVGLElBQUlDLEdBQXNELElBQTlCSCxFQUFFSSxVQUFZOUMsRUFBT0MsT0FBZU0sRUFBT1UsYUFDbkU4QixFQUF1RCxJQUEvQkwsRUFBRU0sVUFBWWhELEVBQU9FLFFBQWdCSyxFQUFPVSxZQUN4RVYsR0FBT1MsYUFBZTZCLEVBQ3RCdEMsRUFBT1csYUFBZTZCLElBRzlCL0MsRUFBT2lELFlBQWMsV0FBYVYsR0FBb0IsR0FDdERDLE9BQU9VLFVBQVksV0FBYVgsR0FBb0IsTUFHeER2QyxFQUFPbUQsUUFBVSxTQUFVVCxHQUN2QkEsRUFBRUUsaUJBQ0VGLEVBQUVVLE9BQVMsRUFFWDdDLEVBQU9VLGNBQWdCLElBR3ZCVixFQUFPVSxjQUFnQixLQWlDL0JNLHNCQUFzQnpCLElGK0NoQixTQUFTakQsRUFBUUQsR0dqUHZCQyxFQUFBRCxRQUFBIiwiZmlsZSI6ImJ1aWxkL2J1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZWQgYnkgajBzaCBvbiA3LzE5LzE2LlxuXHQgKi9cblx0XG5cdHZhciBmcmFjdGFsU2hhZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIHZlcnRleFNoYWRlclN0cmluZyA9IFwiYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxudm9pZCBtYWluKCkgeyBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAuMCwgMS4wKTsgfVwiO1xuXHRcblx0ZnVuY3Rpb24gY29tcGlsZVNoYWRlcihzaGFkZXJTb3VyY2UsIHNoYWRlclR5cGUsIGNvbnRleHQpIHtcblx0ICAgIGNvbnN0IHNoYWRlciA9IGNvbnRleHQuY3JlYXRlU2hhZGVyKHNoYWRlclR5cGUpO1xuXHRcblx0ICAgIGNvbnRleHQuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcblx0ICAgIGNvbnRleHQuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXHRcblx0ICAgIGlmICghY29udGV4dC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBjb250ZXh0LkNPTVBJTEVfU1RBVFVTKSkge1xuXHQgICAgICAgIHRocm93IFwiU2hhZGVyIGNvbXBpbGUgZmFpbGVkIHdpdGg6IFwiICsgY29udGV4dC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIHNoYWRlcjtcblx0fVxuXHRmdW5jdGlvbiBnZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSwgY29udGV4dCkge1xuXHQgICAgY29uc3QgdW5pZm9ybUxvY2F0aW9uID0gY29udGV4dC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7XG5cdFxuXHQgICAgaWYgKHVuaWZvcm1Mb2NhdGlvbiA9PT0gLTEpIHtcblx0ICAgICAgICB0aHJvdyAnQ2FuIG5vdCBmaW5kIHVuaWZvcm0gJyArIG5hbWUgKyAnLic7XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIHVuaWZvcm1Mb2NhdGlvbjtcblx0fVxuXHRmdW5jdGlvbiBnZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBuYW1lLCBjb250ZXh0KSB7XG5cdCAgICBjb25zdCBhdHRyaWJ1dGVMb2NhdGlvbiA9IGNvbnRleHQuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSk7XG5cdFxuXHQgICAgaWYgKGF0dHJpYnV0ZUxvY2F0aW9uID09PSAtMSkge1xuXHQgICAgICAgIHRocm93ICdDYW4gbm90IGZpbmQgYXR0cmlidXRlICcgKyBuYW1lICsgJy4nO1xuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBhdHRyaWJ1dGVMb2NhdGlvbjtcblx0fVxuXHRmdW5jdGlvbiBzZXR1cFdlYmdsUHJvZ3JhbShjb250ZXh0LCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyKSB7XG5cdCAgICB2YXIgcHJvZ3JhbSA9IGNvbnRleHQuY3JlYXRlUHJvZ3JhbSgpO1xuXHQgICAgY29udGV4dC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcblx0ICAgIGNvbnRleHQuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcblx0ICAgIGNvbnRleHQubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG5cdCAgICBjb250ZXh0LnVzZVByb2dyYW0ocHJvZ3JhbSk7XG5cdFxuXHQgICAgdmFyIHZlcnRleERhdGEgPSBuZXcgRmxvYXQzMkFycmF5KFstMS4wLCAxLjAsIC8vIHRvcCBsZWZ0XG5cdCAgICAtMS4wLCAtMS4wLCAvLyBib3R0b20gbGVmdFxuXHQgICAgMS4wLCAxLjAsIC8vIHRvcCByaWdodFxuXHQgICAgMS4wLCAtMS4wIC8vIGJvdHRvbSByaWdodFxuXHQgICAgXSk7XG5cdCAgICB2YXIgdmVydGV4RGF0YUJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlQnVmZmVyKCk7XG5cdCAgICBjb250ZXh0LmJpbmRCdWZmZXIoY29udGV4dC5BUlJBWV9CVUZGRVIsIHZlcnRleERhdGFCdWZmZXIpO1xuXHQgICAgY29udGV4dC5idWZmZXJEYXRhKGNvbnRleHQuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhEYXRhLCBjb250ZXh0LlNUQVRJQ19EUkFXKTtcblx0XG5cdCAgICB2YXIgcG9zaXRpb25IYW5kbGUgPSBnZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCAncG9zaXRpb24nLCBjb250ZXh0KTtcblx0ICAgIGNvbnRleHQuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zaXRpb25IYW5kbGUpO1xuXHQgICAgY29udGV4dC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHBvc2l0aW9uSGFuZGxlLCAyLCAvLyBwb3NpdGlvbiBpcyBhIHZlYzJcblx0ICAgIGNvbnRleHQuRkxPQVQsIC8vIGVhY2ggY29tcG9uZW50IGlzIGEgZmxvYXRcblx0ICAgIGNvbnRleHQuRkFMU0UsIC8vIGRvbid0IG5vcm1hbGl6ZSB2YWx1ZXNcblx0ICAgIDIgKiA0LCAvLyB0d28gNCBieXRlIGZsb2F0IGNvbXBvbmVudHMgcGVyIHZlcnRleFxuXHQgICAgMCAvLyBvZmZzZXQgaW50byBlYWNoIHNwYW4gb2YgdmVydGV4IGRhdGFcblx0ICAgICk7XG5cdCAgICByZXR1cm4gcHJvZ3JhbTtcblx0fVxuXHRcblx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbl9jYW52YXNcIik7XG5cdHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiKTtcblx0dmFyIHZlcnRleFNoYWRlciA9IGNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVyU3RyaW5nLCBjb250ZXh0LlZFUlRFWF9TSEFERVIsIGNvbnRleHQpO1xuXHRcblx0LyoqXG5cdCAqIHNldHVwIG91ciBzaGFkZXIgd2l0aCBvdXIgcGFydGljdWxhciBvcHRpb25zXG5cdCAqIEBwYXJhbSBpdGVyYXRpb25zIG51bWJlciBvZiBpdGVyYXRpb25zXG5cdCAqIEBwYXJhbSBmcmFjdGFsX3R5cGUgZnVuY3Rpb24gbmFtZSBpbiB0aGUgZ2xzbCBjb2RlLiBDdXJyZW50bHkgYWNjZXB0cyBcIm1hbmRlbGJyb3RcIiBvciBcImp1bGlhXCJcblx0ICovXG5cdGZ1bmN0aW9uIHJlQ29tcGlsZVNoYWRlcihpdGVyYXRpb25zLCBmcmFjdGFsX3R5cGUpIHtcblx0ICAgIHZhciBuZXdGcmFnbWVudFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZnJhY3RhbFNoYWRlci5yZXBsYWNlKFwiX19OVU1CRVJfT0ZfSVRFUkFUSU9OU1wiLCBpdGVyYXRpb25zKS5yZXBsYWNlKFwiX19GUkFDVEFMX0ZVTkNcIiwgZnJhY3RhbF90eXBlKSwgY29udGV4dC5GUkFHTUVOVF9TSEFERVIsIGNvbnRleHQpO1xuXHQgICAgcHJvZ3JhbSA9IHNldHVwV2ViZ2xQcm9ncmFtKGNvbnRleHQsIHZlcnRleFNoYWRlciwgbmV3RnJhZ21lbnRTaGFkZXIpO1xuXHR9XG5cdHJlQ29tcGlsZVNoYWRlcigxMDI0LCBcImp1bGlhXCIpO1xuXHRcblx0Ly8gSFRNTCBlbGVtZW50c1xuXHR2YXIgbl9yZXNfeCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzX3hcIik7XG5cdHZhciBuX3Jlc195ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNfeVwiKTtcblx0dmFyIG5faXRlcmF0aW9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaXRlcmF0aW9uc1wiKTtcblx0dmFyIG5fY2hlY2tfbWFuZGVsYnJvdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZnJhY3RhbF9tYW5kZWxicm90XCIpO1xuXHR2YXIgbl9jaGVja19qdWxpYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZnJhY3RhbF9qdWxpYVwiKTtcblx0dmFyIG5fY2hlY2tfanVsaWFfYW5pbWF0ZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZyYWN0YWxfanVsaWFfYW5pbWF0ZWRcIik7XG5cdHZhciBuX2NfcmVhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY19yZWFsXCIpO1xuXHR2YXIgbl9jX2ltYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNfaW1hZ1wiKTtcblx0Ly8gZGVmYXVsdCBjb25maWdcblx0dmFyIGNvbmZpZyA9IHtcblx0ICAgIHdpZHRoOiBuX3Jlc194LnZhbHVlLFxuXHQgICAgaGVpZ2h0OiBuX3Jlc195LnZhbHVlLFxuXHQgICAgaXRlcmF0aW9uczogbl9pdGVyYXRpb25zLnZhbHVlLFxuXHQgICAgY19yZWFsOiBuX2NfcmVhbC52YWx1ZSxcblx0ICAgIGNfaW1hZzogbl9jX2ltYWcudmFsdWUsXG5cdCAgICBjZW50ZXJfcmVhbDogMCxcblx0ICAgIGNlbnRlcl9pbWFnOiAwLFxuXHQgICAgZnJhbWVfcmFkaXVzOiAyLFxuXHQgICAgZnJhY3RhbF90eXBlOiBcImp1bGlhXCJcblx0fTtcblx0XG5cdC8vIHBhcmFtZXRlcnNcblx0bl9yZXNfeC5vbmtleXVwID0gZnVuY3Rpb24gKCkge1xuXHQgICAgY2FudmFzLndpZHRoID0gTnVtYmVyKG5fcmVzX3gudmFsdWUpO1xuXHQgICAgY29uZmlnLndpZHRoID0gTnVtYmVyKG5fcmVzX3gudmFsdWUpO1xuXHR9O1xuXHRuX3Jlc195Lm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBjYW52YXMuaGVpZ2h0ID0gTnVtYmVyKG5fcmVzX3kudmFsdWUpO1xuXHQgICAgY29uZmlnLmhlaWdodCA9IE51bWJlcihuX3Jlc195LnZhbHVlKTtcblx0fTtcblx0bl9pdGVyYXRpb25zLm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBjb25maWcuaXRlcmF0aW9ucyA9IE51bWJlcihuX2l0ZXJhdGlvbnMudmFsdWUpO1xuXHQgICAgcmVDb21waWxlU2hhZGVyKGNvbmZpZy5pdGVyYXRpb25zLCBjb25maWcuZnJhY3RhbF90eXBlKTtcblx0fTtcblx0bl9jaGVja19qdWxpYS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuXHQgICAgY29uZmlnLmZyYWN0YWxfdHlwZSA9IFwianVsaWFcIjtcblx0ICAgIHJlQ29tcGlsZVNoYWRlcihjb25maWcuaXRlcmF0aW9ucywgY29uZmlnLmZyYWN0YWxfdHlwZSk7XG5cdH07XG5cdG5fY2hlY2tfbWFuZGVsYnJvdC5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuXHQgICAgY29uZmlnLmZyYWN0YWxfdHlwZSA9IFwibWFuZGVsYnJvdFwiO1xuXHQgICAgcmVDb21waWxlU2hhZGVyKGNvbmZpZy5pdGVyYXRpb25zLCBjb25maWcuZnJhY3RhbF90eXBlKTtcblx0fTtcblx0bl9jX3JlYWwub25rZXl1cCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGNvbmZpZy5jX3JlYWwgPSBOdW1iZXIobl9jX3JlYWwudmFsdWUpO1xuXHR9O1xuXHRuX2NfaW1hZy5vbmtleXVwID0gZnVuY3Rpb24gKCkge1xuXHQgICAgY29uZmlnLmNfaW1hZyA9IE51bWJlcihuX2NfaW1hZy52YWx1ZSk7XG5cdH07XG5cdFxuXHQvLyBjYW52YXMgbW92ZW1lbnRcblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBjYW52YXNfaXNfY2xpY2tlZCA9IGZhbHNlO1xuXHQgICAgd2luZG93Lm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBhID0gZTtcblx0ICAgICAgICBpZiAoY2FudmFzX2lzX2NsaWNrZWQpIHtcblx0ICAgICAgICAgICAgLy8gb25seSBwcmV2ZW50IGRlZmF1bHQgaWYgd2UncmUgZHJhZ2dpbmcsIHRvIHByZXNlcnZlIHNlbGVjdGluZyB0ZXh0IGZ1bmN0aW9uYWxpdHlcblx0ICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgICAgICAvLyBuZWdhdGUgdGhlIG9mZnNldCBiZWNhdXNlIHdlJ3JlIGRyYWdnaW5nIGl0XG5cdCAgICAgICAgICAgIHZhciBjZW50ZXJfcmVhbF9vZmZzZXQgPSAtKGUubW92ZW1lbnRYIC8gY2FudmFzLndpZHRoKSAqIDIgKiBjb25maWcuZnJhbWVfcmFkaXVzO1xuXHQgICAgICAgICAgICB2YXIgY2VudGVyX2ltYWdfb2Zmc2V0ID0gLShlLm1vdmVtZW50WSAvIGNhbnZhcy5oZWlnaHQpICogMiAqIGNvbmZpZy5mcmFtZV9yYWRpdXM7XG5cdCAgICAgICAgICAgIGNvbmZpZy5jZW50ZXJfcmVhbCArPSBjZW50ZXJfcmVhbF9vZmZzZXQ7XG5cdCAgICAgICAgICAgIGNvbmZpZy5jZW50ZXJfaW1hZyArPSBjZW50ZXJfaW1hZ19vZmZzZXQ7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIGNhbnZhcy5vbm1vdXNlZG93biA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBjYW52YXNfaXNfY2xpY2tlZCA9IHRydWU7XG5cdCAgICB9O1xuXHQgICAgd2luZG93Lm9ubW91c2V1cCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBjYW52YXNfaXNfY2xpY2tlZCA9IGZhbHNlO1xuXHQgICAgfTtcblx0fSkoKTtcblx0Ly8gY2FudmFzIHpvb21cblx0Y2FudmFzLm9ud2hlZWwgPSBmdW5jdGlvbiAoZSkge1xuXHQgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgaWYgKGUuZGVsdGFZID4gMCkge1xuXHQgICAgICAgIC8vIHpvb20gb3V0XG5cdCAgICAgICAgY29uZmlnLmZyYW1lX3JhZGl1cyAqPSAxLjE7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIC8vIHpvb20gaW5cblx0ICAgICAgICBjb25maWcuZnJhbWVfcmFkaXVzIC89IDEuMTtcblx0ICAgIH1cblx0fTtcblx0XG5cdGZ1bmN0aW9uIGRyYXdGcmFtZSgpIHtcblx0ICAgIC8vIHVwZGF0ZSB0aGUgc2l6ZSBvZiB0aGUgd2ViZ2wgcGFydCBvZiB0aGUgY2FudmFzXG5cdCAgICBjb250ZXh0LnZpZXdwb3J0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cdFxuXHQgICAgdmFyIHRpbWUgPSBEYXRlLm5vdygpO1xuXHRcblx0ICAgIHZhciBkYXRhVG9TZW5kVG9HUFUgPSBuZXcgRmxvYXQzMkFycmF5KDkpO1xuXHQgICAgZGF0YVRvU2VuZFRvR1BVWzBdID0gY29uZmlnLndpZHRoO1xuXHQgICAgZGF0YVRvU2VuZFRvR1BVWzFdID0gY29uZmlnLmhlaWdodDtcblx0ICAgIGlmIChuX2NoZWNrX2p1bGlhX2FuaW1hdGVkLmNoZWNrZWQpIHtcblx0ICAgICAgICBkYXRhVG9TZW5kVG9HUFVbMl0gPSAtMC43OTUgKyBNYXRoLnNpbih0aW1lIC8gMjAwMCkgLyA0MDtcblx0ICAgICAgICBkYXRhVG9TZW5kVG9HUFVbM10gPSAwLjIzMjEgKyBNYXRoLmNvcyh0aW1lIC8gMTMzMCkgLyA0MDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZGF0YVRvU2VuZFRvR1BVWzJdID0gTnVtYmVyKGNvbmZpZy5jX3JlYWwpO1xuXHQgICAgICAgIGRhdGFUb1NlbmRUb0dQVVszXSA9IE51bWJlcihjb25maWcuY19pbWFnKTtcblx0ICAgIH1cblx0ICAgIGRhdGFUb1NlbmRUb0dQVVs0XSA9IDg7XG5cdCAgICBkYXRhVG9TZW5kVG9HUFVbNV0gPSBjb25maWcuY2VudGVyX3JlYWwgLSBjb25maWcuZnJhbWVfcmFkaXVzO1xuXHQgICAgZGF0YVRvU2VuZFRvR1BVWzZdID0gY29uZmlnLmNlbnRlcl9yZWFsICsgY29uZmlnLmZyYW1lX3JhZGl1cztcblx0ICAgIGRhdGFUb1NlbmRUb0dQVVs3XSA9IGNvbmZpZy5jZW50ZXJfaW1hZyAtIGNvbmZpZy5mcmFtZV9yYWRpdXM7XG5cdCAgICBkYXRhVG9TZW5kVG9HUFVbOF0gPSBjb25maWcuY2VudGVyX2ltYWcgKyBjb25maWcuZnJhbWVfcmFkaXVzO1xuXHRcblx0ICAgIHZhciBkYXRhUG9pbnRlckZsb2F0QXJyYXkgPSBnZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ2RhdGEnLCBjb250ZXh0KTtcblx0ICAgIGNvbnRleHQudW5pZm9ybTFmdihkYXRhUG9pbnRlckZsb2F0QXJyYXksIGRhdGFUb1NlbmRUb0dQVSk7XG5cdCAgICBjb250ZXh0LmRyYXdBcnJheXMoY29udGV4dC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG5cdFxuXHQgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdGcmFtZSk7XG5cdH1cblx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdGcmFtZSk7XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcblxcbi8vIFdJRFRILCBIRUlHSFQsIENfUkVBTCwgQ19JTUFHSU5BUlksIFhfTUlOLCBYX01BWCwgWV9NSU4sIFlfTUFYXFxudW5pZm9ybSBmbG9hdCBkYXRhWzldO1xcblxcbmZsb2F0IFdJRFRIICAgICAgPSBkYXRhWzBdO1xcbmZsb2F0IEhFSUdIVCAgICAgPSBkYXRhWzFdO1xcblxcbmZsb2F0IENfUkVBTCAgICAgPSBkYXRhWzJdO1xcbmZsb2F0IENfSU1BRyAgICAgPSBkYXRhWzNdO1xcblxcbmZsb2F0IEJSSUdIVE5FU1MgPSBkYXRhWzRdO1xcblxcbmZsb2F0IFhfTUlOICAgICAgPSBkYXRhWzVdO1xcbmZsb2F0IFhfTUFYICAgICAgPSBkYXRhWzZdO1xcbmZsb2F0IFlfTUlOICAgICAgPSBkYXRhWzddO1xcbmZsb2F0IFlfTUFYICAgICAgPSBkYXRhWzhdO1xcblxcbmNvbnN0IGludCBNQVhfSVRFUkFUSU9OUyA9IF9fTlVNQkVSX09GX0lURVJBVElPTlM7XFxuXFxudmVjMiBpUmVzb2x1dGlvbiA9IHZlYzIoV0lEVEgsIEhFSUdIVCk7XFxuXFxuc3RydWN0IGNvbXBsZXgge1xcbiAgZmxvYXQgcmVhbDtcXG4gIGZsb2F0IGltYWdpbmFyeTtcXG59O1xcblxcbmZsb2F0IGZyYWN0YWwoY29tcGxleCBjLCBjb21wbGV4IHopIHtcXG4gIGZvciAoaW50IGl0ZXJhdGlvbiA9IDA7IGl0ZXJhdGlvbiA8IE1BWF9JVEVSQVRJT05TOyBpdGVyYXRpb24rKykge1xcblxcbiAgICAvLyB6IDwtIHpeMiArIGNcXG4gICAgZmxvYXQgcmVhbCA9IHoucmVhbCAqIHoucmVhbCAtIHouaW1hZ2luYXJ5ICogei5pbWFnaW5hcnkgKyBjLnJlYWw7XFxuICAgIGZsb2F0IGltYWdpbmFyeSA9IDIuMCAqIHoucmVhbCAqIHouaW1hZ2luYXJ5ICsgYy5pbWFnaW5hcnk7XFxuXFxuICAgIHoucmVhbCA9IHJlYWw7XFxuICAgIHouaW1hZ2luYXJ5ID0gaW1hZ2luYXJ5O1xcblxcbiAgICBpZiAoei5yZWFsICogei5yZWFsICsgei5pbWFnaW5hcnkgKiB6LmltYWdpbmFyeSA+IDQuMCkge1xcbiAgICAgIGZsb2F0IHNsID0gZmxvYXQoaXRlcmF0aW9uKSAtIGxvZzIobG9nMih6LnJlYWwgKiB6LnJlYWwgKyB6LmltYWdpbmFyeSAqIHouaW1hZ2luYXJ5KSkgKyA0LjA7XFxuICAgICAgcmV0dXJuIHNsO1xcbiAgICB9XFxuICB9XFxuXFxuICByZXR1cm4gMC4wO1xcbn1cXG5cXG5mbG9hdCBtYW5kZWxicm90KHZlYzIgY29vcmRpbmF0ZSwgdmVjMiBvZmZzZXQpIHtcXG4gIGNvbXBsZXggYyA9IGNvbXBsZXgoY29vcmRpbmF0ZS54LCBjb29yZGluYXRlLnkpO1xcbiAgY29tcGxleCB6ID0gY29tcGxleCgwLjAsIDAuMCk7XFxuXFxuICByZXR1cm4gZnJhY3RhbChjLCB6KTtcXG59XFxuXFxuZmxvYXQganVsaWEodmVjMiBjb29yZGluYXRlLCB2ZWMyIG9mZnNldCkge1xcbiAgY29tcGxleCBjID0gY29tcGxleChvZmZzZXQueCwgb2Zmc2V0LnkpO1xcbiAgY29tcGxleCB6ID0gY29tcGxleChjb29yZGluYXRlLngsIGNvb3JkaW5hdGUueSk7XFxuXFxuICByZXR1cm4gZnJhY3RhbChjLCB6KTtcXG59XFxuXFxudmVjMiBmcmFnQ29vcmRUb1hZKHZlYzQgZnJhZ0Nvb3JkKSB7XFxuICB2ZWMyIHJlbGF0aXZlUG9zaXRpb24gPSBmcmFnQ29vcmQueHkgLyBpUmVzb2x1dGlvbi54eTtcXG4gIGZsb2F0IGFzcGVjdFJhdGlvID0gaVJlc29sdXRpb24ueCAvIEhFSUdIVDtcXG5cXG4gIHZlYzIgY2VudGVyID0gdmVjMigoWF9NQVggKyBYX01JTikgLyAyLjAsIChZX01BWCArIFlfTUlOKSAvIDIuMCk7XFxuXFxuICB2ZWMyIGNhcnRlc2lhblBvc2l0aW9uID0gKHJlbGF0aXZlUG9zaXRpb24gLSAwLjUpICogKFhfTUFYIC0gWF9NSU4pO1xcbiAgY2FydGVzaWFuUG9zaXRpb24ueCArPSBjZW50ZXIueDtcXG4gIGNhcnRlc2lhblBvc2l0aW9uLnkgLT0gY2VudGVyLnk7XFxuICBjYXJ0ZXNpYW5Qb3NpdGlvbi54ICo9IGFzcGVjdFJhdGlvO1xcblxcbiAgcmV0dXJuIGNhcnRlc2lhblBvc2l0aW9uO1xcbn1cXG5cXG52b2lkIG1haW4oKSB7XFxuICB2ZWMyIGNvb3JkaW5hdGUgPSBmcmFnQ29vcmRUb1hZKGdsX0ZyYWdDb29yZCk7XFxuXFxuICBmbG9hdCBmcmFjdGFsVmFsdWUgPSBfX0ZSQUNUQUxfRlVOQyhjb29yZGluYXRlLCB2ZWMyKENfUkVBTCwgQ19JTUFHKSk7XFxuXFxuICB2ZWMzIGNvbG9yID0gMC41ICsgMC41KmNvcyggMy4wICsgZnJhY3RhbFZhbHVlKjAuMTUgKyB2ZWMzKDAuMCwwLjYsMS4wKSk7XFxuXFxuICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLCAxLjApO1xcbn1cXG5cIlxuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBidWlsZC9idW5kbGUuanNcbiAqKi8iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIDM1YWFjODliNDdmNDFhMzIwZDUwXG4gKiovIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGowc2ggb24gNy8xOS8xNi5cbiAqL1xuXG52YXIgZnJhY3RhbFNoYWRlciA9IHJlcXVpcmUoXCJzaGFkZXJzL2ZyYWN0YWwuZ2xzbFwiKTtcbnZhciB2ZXJ0ZXhTaGFkZXJTdHJpbmcgPSBcImF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xcbnZvaWQgbWFpbigpIHsgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAwLjAsIDEuMCk7IH1cIjtcblxuZnVuY3Rpb24gY29tcGlsZVNoYWRlcihzaGFkZXJTb3VyY2UsIHNoYWRlclR5cGUsIGNvbnRleHQpIHtcbiAgICBjb25zdCBzaGFkZXIgPSBjb250ZXh0LmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKTtcblxuICAgIGNvbnRleHQuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcbiAgICBjb250ZXh0LmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICAgIGlmICghY29udGV4dC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBjb250ZXh0LkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgICB0aHJvdyBcIlNoYWRlciBjb21waWxlIGZhaWxlZCB3aXRoOiBcIiArIGNvbnRleHQuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXI7XG59XG5mdW5jdGlvbiBnZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSwgY29udGV4dCkge1xuICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IGNvbnRleHQuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIG5hbWUpO1xuXG4gICAgaWYgKHVuaWZvcm1Mb2NhdGlvbiA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgJ0NhbiBub3QgZmluZCB1bmlmb3JtICcgKyBuYW1lICsgJy4nO1xuICAgIH1cblxuICAgIHJldHVybiB1bmlmb3JtTG9jYXRpb247XG59XG5mdW5jdGlvbiBnZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBuYW1lLCBjb250ZXh0KSB7XG4gICAgY29uc3QgYXR0cmlidXRlTG9jYXRpb24gPSBjb250ZXh0LmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIG5hbWUpO1xuXG4gICAgaWYgKGF0dHJpYnV0ZUxvY2F0aW9uID09PSAtMSkge1xuICAgICAgICB0aHJvdyAnQ2FuIG5vdCBmaW5kIGF0dHJpYnV0ZSAnICsgbmFtZSArICcuJztcbiAgICB9XG5cbiAgICByZXR1cm4gYXR0cmlidXRlTG9jYXRpb247XG59XG5mdW5jdGlvbiBzZXR1cFdlYmdsUHJvZ3JhbShjb250ZXh0LCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyKSB7XG4gICAgdmFyIHByb2dyYW0gPSBjb250ZXh0LmNyZWF0ZVByb2dyYW0oKTtcbiAgICBjb250ZXh0LmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgIGNvbnRleHQuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcbiAgICBjb250ZXh0LmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICAgIGNvbnRleHQudXNlUHJvZ3JhbShwcm9ncmFtKTtcblxuICAgIHZhciB2ZXJ0ZXhEYXRhID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIC0xLjAsIDEuMCwgLy8gdG9wIGxlZnRcbiAgICAgICAgLTEuMCwgLTEuMCwgLy8gYm90dG9tIGxlZnRcbiAgICAgICAgMS4wLCAxLjAsIC8vIHRvcCByaWdodFxuICAgICAgICAxLjAsIC0xLjAgIC8vIGJvdHRvbSByaWdodFxuICAgIF0pO1xuICAgIHZhciB2ZXJ0ZXhEYXRhQnVmZmVyID0gY29udGV4dC5jcmVhdGVCdWZmZXIoKTtcbiAgICBjb250ZXh0LmJpbmRCdWZmZXIoY29udGV4dC5BUlJBWV9CVUZGRVIsIHZlcnRleERhdGFCdWZmZXIpO1xuICAgIGNvbnRleHQuYnVmZmVyRGF0YShjb250ZXh0LkFSUkFZX0JVRkZFUiwgdmVydGV4RGF0YSwgY29udGV4dC5TVEFUSUNfRFJBVyk7XG5cbiAgICB2YXIgcG9zaXRpb25IYW5kbGUgPSBnZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCAncG9zaXRpb24nLCBjb250ZXh0KTtcbiAgICBjb250ZXh0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc2l0aW9uSGFuZGxlKTtcbiAgICBjb250ZXh0LnZlcnRleEF0dHJpYlBvaW50ZXIocG9zaXRpb25IYW5kbGUsXG4gICAgICAgIDIsIC8vIHBvc2l0aW9uIGlzIGEgdmVjMlxuICAgICAgICBjb250ZXh0LkZMT0FULCAvLyBlYWNoIGNvbXBvbmVudCBpcyBhIGZsb2F0XG4gICAgICAgIGNvbnRleHQuRkFMU0UsIC8vIGRvbid0IG5vcm1hbGl6ZSB2YWx1ZXNcbiAgICAgICAgMiAqIDQsIC8vIHR3byA0IGJ5dGUgZmxvYXQgY29tcG9uZW50cyBwZXIgdmVydGV4XG4gICAgICAgIDAgLy8gb2Zmc2V0IGludG8gZWFjaCBzcGFuIG9mIHZlcnRleCBkYXRhXG4gICAgKTtcbiAgICByZXR1cm4gcHJvZ3JhbTtcbn1cblxuXG52YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluX2NhbnZhc1wiKTtcbnZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiKTtcbnZhciB2ZXJ0ZXhTaGFkZXIgPSBjb21waWxlU2hhZGVyKHZlcnRleFNoYWRlclN0cmluZywgY29udGV4dC5WRVJURVhfU0hBREVSLCBjb250ZXh0KTtcblxuLyoqXG4gKiBzZXR1cCBvdXIgc2hhZGVyIHdpdGggb3VyIHBhcnRpY3VsYXIgb3B0aW9uc1xuICogQHBhcmFtIGl0ZXJhdGlvbnMgbnVtYmVyIG9mIGl0ZXJhdGlvbnNcbiAqIEBwYXJhbSBmcmFjdGFsX3R5cGUgZnVuY3Rpb24gbmFtZSBpbiB0aGUgZ2xzbCBjb2RlLiBDdXJyZW50bHkgYWNjZXB0cyBcIm1hbmRlbGJyb3RcIiBvciBcImp1bGlhXCJcbiAqL1xuZnVuY3Rpb24gcmVDb21waWxlU2hhZGVyKGl0ZXJhdGlvbnMsIGZyYWN0YWxfdHlwZSkge1xuICAgIHZhciBuZXdGcmFnbWVudFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoXG4gICAgICAgIGZyYWN0YWxTaGFkZXJcbiAgICAgICAgICAgIC5yZXBsYWNlKFwiX19OVU1CRVJfT0ZfSVRFUkFUSU9OU1wiLCBpdGVyYXRpb25zKVxuICAgICAgICAgICAgLnJlcGxhY2UoXCJfX0ZSQUNUQUxfRlVOQ1wiLCBmcmFjdGFsX3R5cGUpXG4gICAgICAgICxcbiAgICAgICAgY29udGV4dC5GUkFHTUVOVF9TSEFERVIsXG4gICAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHByb2dyYW0gPSBzZXR1cFdlYmdsUHJvZ3JhbShjb250ZXh0LCB2ZXJ0ZXhTaGFkZXIsIG5ld0ZyYWdtZW50U2hhZGVyKTtcbn1cbnJlQ29tcGlsZVNoYWRlcigxMDI0LCBcImp1bGlhXCIpO1xuXG4vLyBIVE1MIGVsZW1lbnRzXG52YXIgbl9yZXNfeCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzX3hcIik7XG52YXIgbl9yZXNfeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzX3lcIik7XG52YXIgbl9pdGVyYXRpb25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpdGVyYXRpb25zXCIpO1xudmFyIG5fY2hlY2tfbWFuZGVsYnJvdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZnJhY3RhbF9tYW5kZWxicm90XCIpO1xudmFyIG5fY2hlY2tfanVsaWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZyYWN0YWxfanVsaWFcIik7XG52YXIgbl9jaGVja19qdWxpYV9hbmltYXRlZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZnJhY3RhbF9qdWxpYV9hbmltYXRlZFwiKTtcbnZhciBuX2NfcmVhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY19yZWFsXCIpO1xudmFyIG5fY19pbWFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjX2ltYWdcIik7XG4vLyBkZWZhdWx0IGNvbmZpZ1xudmFyIGNvbmZpZyA9IHtcbiAgICB3aWR0aDogbl9yZXNfeC52YWx1ZSxcbiAgICBoZWlnaHQ6IG5fcmVzX3kudmFsdWUsXG4gICAgaXRlcmF0aW9uczogbl9pdGVyYXRpb25zLnZhbHVlLFxuICAgIGNfcmVhbDogbl9jX3JlYWwudmFsdWUsXG4gICAgY19pbWFnOiBuX2NfaW1hZy52YWx1ZSxcbiAgICBjZW50ZXJfcmVhbDogMCxcbiAgICBjZW50ZXJfaW1hZzogMCxcbiAgICBmcmFtZV9yYWRpdXM6IDIsXG4gICAgZnJhY3RhbF90eXBlOiBcImp1bGlhXCIsXG59O1xuXG4vLyBwYXJhbWV0ZXJzXG5uX3Jlc194Lm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FudmFzLndpZHRoID0gTnVtYmVyKG5fcmVzX3gudmFsdWUpO1xuICAgIGNvbmZpZy53aWR0aCA9IE51bWJlcihuX3Jlc194LnZhbHVlKTtcbn07XG5uX3Jlc195Lm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FudmFzLmhlaWdodCA9IE51bWJlcihuX3Jlc195LnZhbHVlKTtcbiAgICBjb25maWcuaGVpZ2h0ID0gTnVtYmVyKG5fcmVzX3kudmFsdWUpO1xufTtcbm5faXRlcmF0aW9ucy5vbmtleXVwID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbmZpZy5pdGVyYXRpb25zID0gTnVtYmVyKG5faXRlcmF0aW9ucy52YWx1ZSk7XG4gICAgcmVDb21waWxlU2hhZGVyKGNvbmZpZy5pdGVyYXRpb25zLCBjb25maWcuZnJhY3RhbF90eXBlKTtcbn07XG5uX2NoZWNrX2p1bGlhLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uZmlnLmZyYWN0YWxfdHlwZSA9IFwianVsaWFcIjtcbiAgICByZUNvbXBpbGVTaGFkZXIoY29uZmlnLml0ZXJhdGlvbnMsIGNvbmZpZy5mcmFjdGFsX3R5cGUpO1xufTtcbm5fY2hlY2tfbWFuZGVsYnJvdC5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbmZpZy5mcmFjdGFsX3R5cGUgPSBcIm1hbmRlbGJyb3RcIjtcbiAgICByZUNvbXBpbGVTaGFkZXIoY29uZmlnLml0ZXJhdGlvbnMsIGNvbmZpZy5mcmFjdGFsX3R5cGUpO1xufTtcbm5fY19yZWFsLm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7IGNvbmZpZy5jX3JlYWwgPSBOdW1iZXIobl9jX3JlYWwudmFsdWUpOyB9O1xubl9jX2ltYWcub25rZXl1cCA9IGZ1bmN0aW9uICgpIHsgY29uZmlnLmNfaW1hZyA9IE51bWJlcihuX2NfaW1hZy52YWx1ZSk7IH07XG5cbi8vIGNhbnZhcyBtb3ZlbWVudFxuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FudmFzX2lzX2NsaWNrZWQgPSBmYWxzZTtcbiAgICB3aW5kb3cub25tb3VzZW1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBhID0gZTtcbiAgICAgICAgaWYgKGNhbnZhc19pc19jbGlja2VkKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHByZXZlbnQgZGVmYXVsdCBpZiB3ZSdyZSBkcmFnZ2luZywgdG8gcHJlc2VydmUgc2VsZWN0aW5nIHRleHQgZnVuY3Rpb25hbGl0eVxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gbmVnYXRlIHRoZSBvZmZzZXQgYmVjYXVzZSB3ZSdyZSBkcmFnZ2luZyBpdFxuICAgICAgICAgICAgdmFyIGNlbnRlcl9yZWFsX29mZnNldCA9ICgtKGUubW92ZW1lbnRYIC8gY2FudmFzLndpZHRoKSAqIDIgKSAqIGNvbmZpZy5mcmFtZV9yYWRpdXM7XG4gICAgICAgICAgICB2YXIgY2VudGVyX2ltYWdfb2Zmc2V0ID0gKC0oZS5tb3ZlbWVudFkgLyBjYW52YXMuaGVpZ2h0KSAqIDIgKSAqIGNvbmZpZy5mcmFtZV9yYWRpdXM7XG4gICAgICAgICAgICBjb25maWcuY2VudGVyX3JlYWwgKz0gY2VudGVyX3JlYWxfb2Zmc2V0O1xuICAgICAgICAgICAgY29uZmlnLmNlbnRlcl9pbWFnICs9IGNlbnRlcl9pbWFnX29mZnNldDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY2FudmFzLm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKCkge2NhbnZhc19pc19jbGlja2VkID0gdHJ1ZTt9O1xuICAgIHdpbmRvdy5vbm1vdXNldXAgPSBmdW5jdGlvbiAoKSB7Y2FudmFzX2lzX2NsaWNrZWQgPSBmYWxzZTt9O1xufSkoKTtcbi8vIGNhbnZhcyB6b29tXG5jYW52YXMub253aGVlbCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChlLmRlbHRhWSA+IDApIHtcbiAgICAgICAgLy8gem9vbSBvdXRcbiAgICAgICAgY29uZmlnLmZyYW1lX3JhZGl1cyAqPSAxLjE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gem9vbSBpblxuICAgICAgICBjb25maWcuZnJhbWVfcmFkaXVzIC89IDEuMTtcbiAgICB9XG59O1xuXG5cbmZ1bmN0aW9uIGRyYXdGcmFtZSgpIHtcbiAgICAvLyB1cGRhdGUgdGhlIHNpemUgb2YgdGhlIHdlYmdsIHBhcnQgb2YgdGhlIGNhbnZhc1xuICAgIGNvbnRleHQudmlld3BvcnQoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcblxuICAgIHZhciBkYXRhVG9TZW5kVG9HUFUgPSBuZXcgRmxvYXQzMkFycmF5KDkpO1xuICAgIGRhdGFUb1NlbmRUb0dQVVswXSA9IGNvbmZpZy53aWR0aDtcbiAgICBkYXRhVG9TZW5kVG9HUFVbMV0gPSBjb25maWcuaGVpZ2h0O1xuICAgIGlmIChuX2NoZWNrX2p1bGlhX2FuaW1hdGVkLmNoZWNrZWQpIHtcbiAgICAgICAgZGF0YVRvU2VuZFRvR1BVWzJdID0gLTAuNzk1ICsgTWF0aC5zaW4odGltZSAvIDIwMDApIC8gNDA7XG4gICAgICAgIGRhdGFUb1NlbmRUb0dQVVszXSA9IDAuMjMyMSArIE1hdGguY29zKHRpbWUgLyAxMzMwKSAvIDQwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFUb1NlbmRUb0dQVVsyXSA9IE51bWJlcihjb25maWcuY19yZWFsKTtcbiAgICAgICAgZGF0YVRvU2VuZFRvR1BVWzNdID0gTnVtYmVyKGNvbmZpZy5jX2ltYWcpO1xuICAgIH1cbiAgICBkYXRhVG9TZW5kVG9HUFVbNF0gPSA4O1xuICAgIGRhdGFUb1NlbmRUb0dQVVs1XSA9IGNvbmZpZy5jZW50ZXJfcmVhbCAtIGNvbmZpZy5mcmFtZV9yYWRpdXM7XG4gICAgZGF0YVRvU2VuZFRvR1BVWzZdID0gY29uZmlnLmNlbnRlcl9yZWFsICsgY29uZmlnLmZyYW1lX3JhZGl1cztcbiAgICBkYXRhVG9TZW5kVG9HUFVbN10gPSBjb25maWcuY2VudGVyX2ltYWcgLSBjb25maWcuZnJhbWVfcmFkaXVzO1xuICAgIGRhdGFUb1NlbmRUb0dQVVs4XSA9IGNvbmZpZy5jZW50ZXJfaW1hZyArIGNvbmZpZy5mcmFtZV9yYWRpdXM7XG5cbiAgICB2YXIgZGF0YVBvaW50ZXJGbG9hdEFycmF5ID0gZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICdkYXRhJywgY29udGV4dCk7XG4gICAgY29udGV4dC51bmlmb3JtMWZ2KGRhdGFQb2ludGVyRmxvYXRBcnJheSwgZGF0YVRvU2VuZFRvR1BVKTtcbiAgICBjb250ZXh0LmRyYXdBcnJheXMoY29udGV4dC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0ZyYW1lKVxufVxucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdGcmFtZSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9qcy9tYW5kZWxicm90LmpzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5cXG4vLyBXSURUSCwgSEVJR0hULCBDX1JFQUwsIENfSU1BR0lOQVJZLCBYX01JTiwgWF9NQVgsIFlfTUlOLCBZX01BWFxcbnVuaWZvcm0gZmxvYXQgZGF0YVs5XTtcXG5cXG5mbG9hdCBXSURUSCAgICAgID0gZGF0YVswXTtcXG5mbG9hdCBIRUlHSFQgICAgID0gZGF0YVsxXTtcXG5cXG5mbG9hdCBDX1JFQUwgICAgID0gZGF0YVsyXTtcXG5mbG9hdCBDX0lNQUcgICAgID0gZGF0YVszXTtcXG5cXG5mbG9hdCBCUklHSFRORVNTID0gZGF0YVs0XTtcXG5cXG5mbG9hdCBYX01JTiAgICAgID0gZGF0YVs1XTtcXG5mbG9hdCBYX01BWCAgICAgID0gZGF0YVs2XTtcXG5mbG9hdCBZX01JTiAgICAgID0gZGF0YVs3XTtcXG5mbG9hdCBZX01BWCAgICAgID0gZGF0YVs4XTtcXG5cXG5jb25zdCBpbnQgTUFYX0lURVJBVElPTlMgPSBfX05VTUJFUl9PRl9JVEVSQVRJT05TO1xcblxcbnZlYzIgaVJlc29sdXRpb24gPSB2ZWMyKFdJRFRILCBIRUlHSFQpO1xcblxcbnN0cnVjdCBjb21wbGV4IHtcXG4gIGZsb2F0IHJlYWw7XFxuICBmbG9hdCBpbWFnaW5hcnk7XFxufTtcXG5cXG5mbG9hdCBmcmFjdGFsKGNvbXBsZXggYywgY29tcGxleCB6KSB7XFxuICBmb3IgKGludCBpdGVyYXRpb24gPSAwOyBpdGVyYXRpb24gPCBNQVhfSVRFUkFUSU9OUzsgaXRlcmF0aW9uKyspIHtcXG5cXG4gICAgLy8geiA8LSB6XjIgKyBjXFxuICAgIGZsb2F0IHJlYWwgPSB6LnJlYWwgKiB6LnJlYWwgLSB6LmltYWdpbmFyeSAqIHouaW1hZ2luYXJ5ICsgYy5yZWFsO1xcbiAgICBmbG9hdCBpbWFnaW5hcnkgPSAyLjAgKiB6LnJlYWwgKiB6LmltYWdpbmFyeSArIGMuaW1hZ2luYXJ5O1xcblxcbiAgICB6LnJlYWwgPSByZWFsO1xcbiAgICB6LmltYWdpbmFyeSA9IGltYWdpbmFyeTtcXG5cXG4gICAgaWYgKHoucmVhbCAqIHoucmVhbCArIHouaW1hZ2luYXJ5ICogei5pbWFnaW5hcnkgPiA0LjApIHtcXG4gICAgICBmbG9hdCBzbCA9IGZsb2F0KGl0ZXJhdGlvbikgLSBsb2cyKGxvZzIoei5yZWFsICogei5yZWFsICsgei5pbWFnaW5hcnkgKiB6LmltYWdpbmFyeSkpICsgNC4wO1xcbiAgICAgIHJldHVybiBzbDtcXG4gICAgfVxcbiAgfVxcblxcbiAgcmV0dXJuIDAuMDtcXG59XFxuXFxuZmxvYXQgbWFuZGVsYnJvdCh2ZWMyIGNvb3JkaW5hdGUsIHZlYzIgb2Zmc2V0KSB7XFxuICBjb21wbGV4IGMgPSBjb21wbGV4KGNvb3JkaW5hdGUueCwgY29vcmRpbmF0ZS55KTtcXG4gIGNvbXBsZXggeiA9IGNvbXBsZXgoMC4wLCAwLjApO1xcblxcbiAgcmV0dXJuIGZyYWN0YWwoYywgeik7XFxufVxcblxcbmZsb2F0IGp1bGlhKHZlYzIgY29vcmRpbmF0ZSwgdmVjMiBvZmZzZXQpIHtcXG4gIGNvbXBsZXggYyA9IGNvbXBsZXgob2Zmc2V0LngsIG9mZnNldC55KTtcXG4gIGNvbXBsZXggeiA9IGNvbXBsZXgoY29vcmRpbmF0ZS54LCBjb29yZGluYXRlLnkpO1xcblxcbiAgcmV0dXJuIGZyYWN0YWwoYywgeik7XFxufVxcblxcbnZlYzIgZnJhZ0Nvb3JkVG9YWSh2ZWM0IGZyYWdDb29yZCkge1xcbiAgdmVjMiByZWxhdGl2ZVBvc2l0aW9uID0gZnJhZ0Nvb3JkLnh5IC8gaVJlc29sdXRpb24ueHk7XFxuICBmbG9hdCBhc3BlY3RSYXRpbyA9IGlSZXNvbHV0aW9uLnggLyBIRUlHSFQ7XFxuXFxuICB2ZWMyIGNlbnRlciA9IHZlYzIoKFhfTUFYICsgWF9NSU4pIC8gMi4wLCAoWV9NQVggKyBZX01JTikgLyAyLjApO1xcblxcbiAgdmVjMiBjYXJ0ZXNpYW5Qb3NpdGlvbiA9IChyZWxhdGl2ZVBvc2l0aW9uIC0gMC41KSAqIChYX01BWCAtIFhfTUlOKTtcXG4gIGNhcnRlc2lhblBvc2l0aW9uLnggKz0gY2VudGVyLng7XFxuICBjYXJ0ZXNpYW5Qb3NpdGlvbi55IC09IGNlbnRlci55O1xcbiAgY2FydGVzaWFuUG9zaXRpb24ueCAqPSBhc3BlY3RSYXRpbztcXG5cXG4gIHJldHVybiBjYXJ0ZXNpYW5Qb3NpdGlvbjtcXG59XFxuXFxudm9pZCBtYWluKCkge1xcbiAgdmVjMiBjb29yZGluYXRlID0gZnJhZ0Nvb3JkVG9YWShnbF9GcmFnQ29vcmQpO1xcblxcbiAgZmxvYXQgZnJhY3RhbFZhbHVlID0gX19GUkFDVEFMX0ZVTkMoY29vcmRpbmF0ZSwgdmVjMihDX1JFQUwsIENfSU1BRykpO1xcblxcbiAgdmVjMyBjb2xvciA9IDAuNSArIDAuNSpjb3MoIDMuMCArIGZyYWN0YWxWYWx1ZSowLjE1ICsgdmVjMygwLjAsMC42LDEuMCkpO1xcblxcbiAgZ2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgMS4wKTtcXG59XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc2hhZGVycy9mcmFjdGFsLmdsc2xcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9